---
- name: Create EC2 instances
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
  - name: Import Output_vars variable
    include_vars: vars/output_vars

  - name: Import Output_vars variable
    include_vars: vars/vpc_setup

  - name: Import devprostacck variable
    include_vars: vars/devprostack

  - name: Create a key pair
    amazon.aws.ec2_key:
      name: dprokey
      region: "{{ region }}"
    register: dprokey_out

  - name: Save private key into file loginkey_dpro.pem
    ansible.builtin.copy:
      content: "{{ dprokey_out.key.private_key }}"
      dest: "./loginkey_dpro.pem"
      mode: 0600
    when: dprokey_out.changed

  - name: Create load balancer security group
    amazon.aws.ec2_security_group:
      name: dproELB_sg
      description: Allow port 80 from everywhere and all ports within sg
      region: "{{ region }}"
      vpc_id: "{{ vpcid }}"
      rules:
        - proto: tcp
          ports:
            - 80
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on port 80
    register: dproELB_sg_out

  - name: Create Devpro Stack security group
    amazon.aws.ec2_security_group:
      name: dproStack_sg
      description: Allow port 22 from everywhere and all ports within sg
      region: "{{ region }}"
      vpc_id: "{{ vpcid }}"
      purge_rules: false
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
          group_id: "{{ dproELB_sg_out.group_id }}"
        - proto: tcp
          from_port: 22
          to_port: 22
          group_id: "{{ BastionSGid }}"
    register: dproStack_sg_out

  - name: Udpate security group with its own sg id
    amazon.aws.ec2_security_group:
      name: dproStack-sg
      description: Allow port 22 from everywhere and all ports within sg
      region: "{{ region }}"
      vpc_id: "{{ vpcid }}"
      purge_rules: false
      rules:
        - proto: all
          group_id: "{{ dproStack_sg_out.group_id }}"

  - name: Create Nginx web01
    amazon.aws.ec2_instance:
      key_name: dprokey
      region: "{{region}}"
      instance_type: t2.micro
      image_id: "{{nginx_ami}}"
      wait: yes
      wait_timeout: 300
      tags:
        Name: "web01"
        Project: Devpro
        Owner: DevOps Team
      exact_count: 1
      security_group: "{{dproStack_sg_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
    register: bastionHost_out

  - name: Create tomcat app01
    amazon.aws.ec2_instance:
      key_name: dprokey
      region: "{{region}}"
      instance_type: t2.micro
      image_id: "{{tomcat_ami}}"
      wait: yes
      wait_timeout: 300
      tags:
        Name: "app01"
        Project: Devpro
        Owner: DevOps Team
      exact_count: 1
      security_group: "{{dproStack_sg_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
    register: web01_out

  - name: Create memcache mc01
    amazon.aws.ec2_instance:
      key_name: dprokey
      region: "{{region}}"
      instance_type: t2.micro
      image_id: "{{memcache_ami}}"
      wait: yes
      wait_timeout: 300
      tags:
        Name: "mc01"
        Project: Devpro
        Owner: DevOps Team
      exact_count: 1
      security_group: "{{dproStack_sg_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
    register: mc01_out

  - name: Create RabbitMQ rmq01
    amazon.aws.ec2_instance:
      key_name: dprokey
      region: "{{region}}"
      instance_type: t2.micro
      image_id: "{{rmq_ami}}"
      wait: yes
      wait_timeout: 300
      tags:
        Name: "rmq01"
        Project: Devpro
        Owner: DevOps Team
      exact_count: 1
      security_group: "{{dproStack_sg_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
    register: rmq01_out

  - name: Create MYSQL db01
    amazon.aws.ec2_instance:
      key_name: dprokey
      region: "{{region}}"
      instance_type: t2.micro
      image_id: "{{mysql_ami}}"
      wait: yes
      wait_timeout: 300
      tags:
        Name: "db01"
        Project: Devpro
        Owner: DevOps Team
      exact_count: 1
      security_group: "{{dproStack_sg_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
    register: db01_out

  - name: Print return information from the previous task
    ansible.builtin.debug:
      var: db01_out

